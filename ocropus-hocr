#!/usr/bin/env python

import __builtin__ as python
import random as pyrandom
import sys
import re
import glob
import argparse
import codecs
import os
from collections import OrderedDict as OD
import json
from copy import deepcopy

import numpy as np
from matplotlib.pyplot import imread

import ocrolib
from ocrolib import hocr

parser = argparse.ArgumentParser("""
Construct an HTML output file in hOCR format by putting together
the recognition results for each page in sequence.
You should usually invoke this program as 

    ocropus-hocr 'book/????.bin.png'

For each page like 'book/0001.bin.png', it uses the following files:

    book/0001.bin.png            # page image
    book/0001.pseg.png           # page segmentation
    book/0001/010001.txt         # recognizer output for lines
""")
parser.add_argument("-b","--nobreaks",action="store_true",help="don't output line breaks")
parser.add_argument("-p","--nopars",action="store_true",help="don't output paragraphs")
parser.add_argument("-n","--normal",action="store_true",help="surpress the output of extended hocr version (only available if '-j/--json' was set to gpageseg)")
parser.add_argument("-c","--charconfs",action="store_true",help="output confidences of every char, only in combination with extened hocr-file.")
parser.add_argument("-s","--fscale",type=float,default=1.0,help="scale factor for translating xheights into font size (use 0 to disable), default: %(default)s")
parser.add_argument("-o","--output",default="book.html",help="output file, default: %(default)s")
parser.add_argument('files',nargs='+')
args = parser.parse_args()
args.files = ocrolib.glob_all(args.files)

ostream = codecs.open(args.output,"w","utf-8")

def E(*args):
    args = [str(x) for x in args]
    sys.stderr.write(" ".join(args))
    sys.stderr.write("\n")
def P(*args):
    ostream.write("".join(args)+"\n")
def PN(*args):
    ostream.write("".join(args))

E("writing to",args.output)
median_xheight = None
dirs = [ocrolib.allsplitext(name)[0] for name in args.files]
xhfiles = python.sum([glob.glob(d+"/??????.xheight") for d in dirs],[])
if len(xhfiles)>5:
    xheights = [float(ocrolib.read_text(f)) for f in xhfiles]
    if len(xheights)>0:
        median_xheight = np.median(xheights)
else:    
    lfiles = python.sum([glob.glob(d+"/??????.bin.png") for d in dirs],[])
    pyrandom.shuffle(lfiles)
    if len(lfiles)>0:
        median_xheight = 0.5*np.median([imread(f).shape[0] for f in lfiles[:100]])
E("median_xheight",median_xheight)

P(hocr.header())

last_coords = None

for arg in args.files:
    base,_ = ocrolib.allsplitext(arg)
    try:
        E("===",arg)
        image = ocrolib.read_image_binary(arg)
        height, width = image.shape
        P("<div class='ocr_page' title='image %s; bbox 0 0 %d %d'>"%(arg,width,height))

        # to proceed, we need a pseg file and a
        # subdirectory containing text lines

        if not os.path.exists(base+".pseg.png"):
            E("%s: no such file"%(base+".pseg.png",))
            continue

        if not os.path.isdir(base):
            E("%s: no such directory"%base)
            continue

        # iterate through the text lines in reading order, based
        # on the page segmentation file

        pseg = ocrolib.read_page_segmentation(base+".pseg.png")
        regions = ocrolib.RegionExtractor()
        regions.setPageLines(pseg)
        for i in range(1,regions.length()):

            # keep track of the bounding box information for each line
            # and insert paragraph breaks as needed

            id = regions.id(i)
            y0,x0,y1,x1 = regions.bbox(i)
            if last_coords is not None:
                lx0,ly0 = last_coords
                dx,dy = x0-lx0,y1-ly0
                par = 0
                if dy>0: 
                    par = 0 # column break... moving upwards
                else:
                    if median_xheight is not None:
                        if abs(dy)>5*median_xheight: par = 1 # whitespace separator
                        if dx>2*median_xheight: par = 1 # indented paragraph
                        if abs(dx)>10*median_xheight: par = 1 # something else
                if par and not args.nopars: P("<p />")
            last_coords = (x0,y0)

            # get the text for the line itself

            lbase = "%s/%06x"%(base,id)

            if not os.path.exists(lbase+".txt"):
                E("note: line %s produced no output (it may not have contained text)"%(lbase+".bin.png"))
                continue

            text = ocrolib.read_text(lbase+".txt")

            text = re.sub(r'\&','\&amp;',text)
            text = re.sub(r'\<','\&lt;',text)

            # accumulate information for each line here

            style = ""
            info = ""

            # estimate the font size for this line

            if median_xheight is not None and os.path.exists(lbase+".xheight"):
                xheight = float(ocrolib.read_text(lbase+".xheight"))
                perc = int(np.clip(xheight*100.0/median_xheight,30,300))
                perc = 10*((perc+5)//10)
                if perc!=100:
                    style += "font-size:%d%%;"%perc

            # output geometric information 

            info += "bbox %d %d %d %d"%(x0,y0,x1,y1)
            if os.path.exists(lbase+".baseline"):
                info += "; baseline "+ocrolib.read_text(lbase+".baseline")

            # extend the hocr files with information from cloc and prob files
            if not args.normal:
                if not os.path.exists(lbase + ".ocropy.json"):
                    print("There is no %s.ocropy.json file." %(lbase))
                    args.normal = True
                else:
                    with open(lbase + ".ocropy.json", "r") as jsonfile:
                        jsondata = json.load(jsonfile, object_pairs_hook=OD)

                    # put all information about the ocr_line together into a SPAN

                    PN("    <span")
                    if style != "": PN(" style='" + style + "'")
                    PN(" class='ocr_line' title='%s'>" % info, )
                    P("<br />")

                    pad = jsondata["pad"]["gpageseg"]
                    scale = jsondata["scale"]["rpred"]
                    jsondata["bbox"]["word"]= OD()
                    wcount= 0
                    #convert string key value to int
                    for key in jsondata["chars"].keys():
                        jsondata["chars"][int(key)] = deepcopy(jsondata["chars"][key])
                        del jsondata["chars"][key]
                    jsondata["chars"][len(jsondata["chars"])] = OD()
                    jsondata["chars"][len(jsondata["chars"])-1]["char"]=" "
                    jsondata["bbox"]["word"] = OD()


                    # idx0 = start_index, idx1 = stop_index(whitespace) of the recognized word
                    idx0 = 0
                    chars = ""
                    charconfs = ""
                    wconf = 1.0

                    # set lineparameter
                    wy0 = jsondata["bbox"]["line"]["y0"]
                    wy1 = jsondata["bbox"]["line"]["y1"]
                    if "x0" in jsondata["chars"][0]:
                        for idx1 in jsondata["chars"]:
                            if jsondata["chars"][idx1]["char"] == " ":
                                if jsondata["bbox"]["line"]["chars"] != "":
                                    # set lineparameter
                                    wx0= jsondata["bbox"]["line"]["x0"]
                                    if idx0 != 0:
                                        #Take the end value of the previous whitespace
                                        # scale factor correct?
                                        wx0 = jsondata["bbox"]["line"]["x0"] + jsondata["chars"][idx0]["x1"]
                                    if idx1 == len(jsondata["chars"])-1:
                                        wx1 = jsondata["bbox"]["line"]["x1"]
                                    else:
                                        # Take the maxima value of the current whitespace
                                        wx1= jsondata["bbox"]["line"]["x0"] + jsondata["chars"][idx1]["x1"]

                                    # Store the char and bbox values in dict
                                    jsondata["bbox"]["word"][len(jsondata["bbox"]["word"])] = OD()
                                    jsondata["bbox"]["word"][len(jsondata["bbox"]["word"]) - 1]["chars"] = chars
                                    jsondata["bbox"]["word"][len(jsondata["bbox"]["word"]) - 1]["x0"]= wx0
                                    jsondata["bbox"]["word"][len(jsondata["bbox"]["word"]) - 1]["x1"]= wx1
                                    jsondata["bbox"]["word"][len(jsondata["bbox"]["word"]) - 1]["y0"]= wy0
                                    jsondata["bbox"]["word"][len(jsondata["bbox"]["word"]) - 1]["y1"]= wy1

                                    # Stores all information in one string
                                    info = "bbox " + ' '.join(map(str, [wx0,wy0,wx1,wy1]))
                                    if wconf == 1: wconf = 0
                                    info += "; x_wconf "+str(wconf*100)
                                    if args.charconfs:
                                        if charconfs == "": charconfs = " 0"
                                        info += "; x_confs"+charconfs

                                    # reset conf values
                                    charconfs = ""
                                    wconf = 1

                                    # put all information about the ocr_word together into a SPAN
                                else:
                                    info = "bbox " + ' '.join(map(str, [jsondata["bbox"]["line"]["x0"], wy0, jsondata["bbox"]["line"]["x1"], wy1]))
                                    info += "; x_wconf 0; x_confs 0"

                                PN("        <span")
                                if style != "": PN(" style='" + style + "'")
                                PN(" class='ocrx_word' title='%s'>" % info, chars, "</span>\n")
                                idx0 = idx1
                                chars = ""

                            elif jsondata["chars"][idx1]["char"] != "":
                                # atm unknown chars will be skipped (you could maybe use them to cut finer?)
                                chars += jsondata["chars"][idx1]["char"]
                                wconf = wconf * jsondata["chars"][idx1]["prob"]
                                charconfs += " " + str(jsondata["chars"][idx1]["prob"]*100)

                        PN("    </span>\n")
                    else:
                        print("There are no bbox information in %s.ocropy.json file, please set '--clocs'-option on rpred." % (lbase))
                        args.normal = True
                    with codecs.open(lbase + ".ocropy.json", "w", encoding="utf-8") as jsonfile:
                        del jsondata["chars"][len(jsondata["chars"]) - 1]
                        json.dump(jsondata, jsonfile, indent=4, ensure_ascii=False)
            if args.normal:

                # put it all together into a SPAN (not extend hocr-files)

                PN("<span")
                if style!="": PN(" style='"+style+"'")
                PN(" class='ocr_line' title='%s'>"%info,text,"</span>")
                if not args.nobreaks: P("<br />")
                else: P()
    finally:
        P("</div>")

P(hocr.footer())

ostream.close()
